/*
 * Selling Partner API for Reports
 * The Selling Partner API for Reports lets you retrieve and manage a variety of reports that can help selling partners manage their businesses.
 *
 * OpenAPI spec version: 2021-06-30
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.erp.sdk.oms.amz.spapi.model.reports;

import com.common.core.exception.ServiceException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;


import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Stream;

/**
 * CreateReportScheduleSpecification
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-07-24T09:21:46.317+08:00")
public class CreateReportScheduleSpecification {
    @SerializedName("reportType")
    private String reportType = null;

    @SerializedName("marketplaceIds")
    private List<String> marketplaceIds = new ArrayList<String>();

    @SerializedName("reportOptions")
    private ReportOptions reportOptions = null;

    /**
     * One of a set of predefined ISO 8601 periods that specifies how often a report should be created.
     */
    @JsonAdapter(PeriodEnum.Adapter.class)
    public enum PeriodEnum {
        PT5M("PT5M"),

        PT15M("PT15M"),

        PT30M("PT30M"),

        PT1H("PT1H"),

        PT2H("PT2H"),

        PT4H("PT4H"),

        PT8H("PT8H"),

        PT12H("PT12H"),

        P1D("P1D"),

        P2D("P2D"),

        P3D("P3D"),

        PT84H("PT84H"),

        P7D("P7D"),

        P14D("P14D"),

        P15D("P15D"),

        P18D("P18D"),

        P30D("P30D"),

        P1M("P1M");

        private String value;


        PeriodEnum(String value) {
            this.value = value;
        }

        public static PeriodEnum getByCode(String period) {
            return Stream.of(PeriodEnum.values())
                    .filter(periodEnum -> periodEnum.getValue().equalsIgnoreCase(period))
                    .findFirst()
                    .orElseThrow(() -> new ServiceException("为找到对应时间段类型:"+ period))
                    ;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static PeriodEnum fromValue(String text) {
            for (PeriodEnum b : PeriodEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public OffsetDateTime plusPeriod(OffsetDateTime currentDateTime){
            switch (this){
                case PT5M:
                    return currentDateTime.plusMinutes(5);
                case PT15M:
                    return currentDateTime.plusMinutes(15);
                case PT30M:
                    return currentDateTime.plusMinutes(30);
                case PT1H:
                    return currentDateTime.plusHours(1);
                case PT2H:
                    return currentDateTime.plusHours(2);
                case PT4H:
                    return currentDateTime.plusHours(4);
                case PT8H:
                    return currentDateTime.plusHours(8);
                case PT12H:
                    return currentDateTime.plusHours(12);
                case P1D:
                    return currentDateTime.plusDays(1);
                case P2D:
                    return currentDateTime.plusDays(2);
                case P3D:
                    return currentDateTime.plusDays(3);
                case PT84H:
                    return currentDateTime.plusHours(84);
                case P7D:
                    return currentDateTime.plusDays(7);
                case P14D:
                    return currentDateTime.plusDays(14);
                case P15D:
                    return currentDateTime.plusDays(15);
                case P18D:
                    return currentDateTime.plusDays(18);
                case P30D:
                    return currentDateTime.plusDays(30);
                case P1M:
                    return currentDateTime.plusMinutes(1);
            }
            throw new ServiceException("未找到对应时区");
        }

        public OffsetDateTime formatTime(OffsetDateTime currentDateTime) {
            // 15分钟
            if (CreateReportScheduleSpecification.PeriodEnum.PT15M.equals(this)) {
                // 获取当前分钟数
                int currentMinute = currentDateTime.getMinute();
                // 计算最接近的 15 分钟的整数
                int closestFifteenMinute = ((currentMinute + 7) / 15) * 15;
                int finialClosestFifteenMinute = 60 == closestFifteenMinute ? 0 : closestFifteenMinute;
                // 设置当前分钟数为最接近的 15 分钟的整数
                return currentDateTime.withMinute(finialClosestFifteenMinute)
                        .withSecond(0)
                        .withNano(0);
            }
            // 30分钟
            if (CreateReportScheduleSpecification.PeriodEnum.PT30M.equals(this)) {
                // 获取当前分钟数
                int currentMinute = currentDateTime.getMinute();
                // 计算最接近的 30 分钟的整数
                int closestThirtyMinute = ((currentMinute + 15) / 30) * 30;
                int finialClosestThirtyMinute = 60 == closestThirtyMinute ? 0 : closestThirtyMinute;
                // 设置当前分钟数为最接近的 15 分钟的整数
                return currentDateTime.withMinute(finialClosestThirtyMinute)
                        .withSecond(0)
                        .withNano(0);
            }
            // 其他时间取整
            return currentDateTime.withMinute(0)
                        .withSecond(0)
                        .withNano(0);
        }

        public static class Adapter extends TypeAdapter<PeriodEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final PeriodEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public PeriodEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return PeriodEnum.fromValue(String.valueOf(value));
            }
        }
    }

    @SerializedName("period")
    private PeriodEnum period = null;

    @SerializedName("nextReportCreationTime")
    private String nextReportCreationTime = null;

    public CreateReportScheduleSpecification reportType(String reportType) {
        this.reportType = reportType;
        return this;
    }

    /**
     * The report type.
     *
     * @return reportType
     **/

    public String getReportType() {
        return reportType;
    }

    public void setReportType(String reportType) {
        this.reportType = reportType;
    }

    public CreateReportScheduleSpecification marketplaceIds(List<String> marketplaceIds) {
        this.marketplaceIds = marketplaceIds;
        return this;
    }

    public CreateReportScheduleSpecification addMarketplaceIdsItem(String marketplaceIdsItem) {
        this.marketplaceIds.add(marketplaceIdsItem);
        return this;
    }

    /**
     * A list of marketplace identifiers for the report schedule.
     *
     * @return marketplaceIds
     **/

    public List<String> getMarketplaceIds() {
        return marketplaceIds;
    }

    public void setMarketplaceIds(List<String> marketplaceIds) {
        this.marketplaceIds = marketplaceIds;
    }

    public CreateReportScheduleSpecification reportOptions(ReportOptions reportOptions) {
        this.reportOptions = reportOptions;
        return this;
    }

    /**
     * Get reportOptions
     *
     * @return reportOptions
     **/

    public ReportOptions getReportOptions() {
        return reportOptions;
    }

    public void setReportOptions(ReportOptions reportOptions) {
        this.reportOptions = reportOptions;
    }

    public CreateReportScheduleSpecification period(PeriodEnum period) {
        this.period = period;
        return this;
    }

    /**
     * One of a set of predefined ISO 8601 periods that specifies how often a report should be created.
     *
     * @return period
     **/

    public PeriodEnum getPeriod() {
        return period;
    }

    public void setPeriod(PeriodEnum period) {
        this.period = period;
    }

    public CreateReportScheduleSpecification nextReportCreationTime(String nextReportCreationTime) {
        this.nextReportCreationTime = nextReportCreationTime;
        return this;
    }

    /**
     * The date and time when the schedule will create its next report, in ISO 8601 date time format.
     *
     * @return nextReportCreationTime
     **/

    public String getNextReportCreationTime() {
        return nextReportCreationTime;
    }

    public void setNextReportCreationTime(String nextReportCreationTime) {
        this.nextReportCreationTime = nextReportCreationTime;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateReportScheduleSpecification createReportScheduleSpecification = (CreateReportScheduleSpecification) o;
        return Objects.equals(this.reportType, createReportScheduleSpecification.reportType) &&
                Objects.equals(this.marketplaceIds, createReportScheduleSpecification.marketplaceIds) &&
                Objects.equals(this.reportOptions, createReportScheduleSpecification.reportOptions) &&
                Objects.equals(this.period, createReportScheduleSpecification.period) &&
                Objects.equals(this.nextReportCreationTime, createReportScheduleSpecification.nextReportCreationTime);
    }

    @Override
    public int hashCode() {
        return Objects.hash(reportType, marketplaceIds, reportOptions, period, nextReportCreationTime);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CreateReportScheduleSpecification {\n");

        sb.append("    reportType: ").append(toIndentedString(reportType)).append("\n");
        sb.append("    marketplaceIds: ").append(toIndentedString(marketplaceIds)).append("\n");
        sb.append("    reportOptions: ").append(toIndentedString(reportOptions)).append("\n");
        sb.append("    period: ").append(toIndentedString(period)).append("\n");
        sb.append("    nextReportCreationTime: ").append(toIndentedString(nextReportCreationTime)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

