/*
 * Selling Partner API for Orders
 * The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools. The Orders API supports orders that are two years old or less. Orders more than two years old will not show in the API response.  _Note:_ The Orders API supports orders from 2016 and after for the JP, AU, and SG marketplaces.
 *
 * OpenAPI spec version: v0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.erp.sdk.oms.amz.spapi.model.orders;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.Objects;

/**
 * The request schema for an shipment confirmation.
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-10-19T15:50:46.979485800+08:00[Asia/Shanghai]")

public class ConfirmShipmentRequest {
    @SerializedName("packageDetail")
    private PackageDetail packageDetail = null;

    /**
     * The cod collection method, support in JP only.
     */
    @JsonAdapter(CodCollectionMethodEnum.Adapter.class)
    public enum CodCollectionMethodEnum {
        @SerializedName("DirectPayment")
        DIRECTPAYMENT("DirectPayment");

        private String value;

        CodCollectionMethodEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static CodCollectionMethodEnum fromValue(String input) {
            for (CodCollectionMethodEnum b : CodCollectionMethodEnum.values()) {
                if (b.value.equals(input)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<CodCollectionMethodEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final CodCollectionMethodEnum enumeration) throws IOException {
                jsonWriter.value(String.valueOf(enumeration.getValue()));
            }

            @Override
            public CodCollectionMethodEnum read(final JsonReader jsonReader) throws IOException {
                Object value = jsonReader.nextString();
                return CodCollectionMethodEnum.fromValue((String) (value));
            }
        }
    }

    @SerializedName("codCollectionMethod")
    private CodCollectionMethodEnum codCollectionMethod = null;

    @SerializedName("marketplaceId")
    private String marketplaceId = null;

    public ConfirmShipmentRequest packageDetail(PackageDetail packageDetail) {
        this.packageDetail = packageDetail;
        return this;
    }

    /**
     * Get packageDetail
     *
     * @return packageDetail
     **/

    public PackageDetail getPackageDetail() {
        return packageDetail;
    }

    public void setPackageDetail(PackageDetail packageDetail) {
        this.packageDetail = packageDetail;
    }

    public ConfirmShipmentRequest codCollectionMethod(CodCollectionMethodEnum codCollectionMethod) {
        this.codCollectionMethod = codCollectionMethod;
        return this;
    }

    /**
     * The cod collection method, support in JP only.
     *
     * @return codCollectionMethod
     **/

    public CodCollectionMethodEnum getCodCollectionMethod() {
        return codCollectionMethod;
    }

    public void setCodCollectionMethod(CodCollectionMethodEnum codCollectionMethod) {
        this.codCollectionMethod = codCollectionMethod;
    }

    public ConfirmShipmentRequest marketplaceId(String marketplaceId) {
        this.marketplaceId = marketplaceId;
        return this;
    }

    /**
     * Get marketplaceId
     *
     * @return marketplaceId
     **/

    public String getMarketplaceId() {
        return marketplaceId;
    }

    public void setMarketplaceId(String marketplaceId) {
        this.marketplaceId = marketplaceId;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConfirmShipmentRequest confirmShipmentRequest = (ConfirmShipmentRequest) o;
        return Objects.equals(this.packageDetail, confirmShipmentRequest.packageDetail) &&
                Objects.equals(this.codCollectionMethod, confirmShipmentRequest.codCollectionMethod) &&
                Objects.equals(this.marketplaceId, confirmShipmentRequest.marketplaceId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(packageDetail, codCollectionMethod, marketplaceId);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ConfirmShipmentRequest {\n");

        sb.append("    packageDetail: ").append(toIndentedString(packageDetail)).append("\n");
        sb.append("    codCollectionMethod: ").append(toIndentedString(codCollectionMethod)).append("\n");
        sb.append("    marketplaceId: ").append(toIndentedString(marketplaceId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
